++JSesh_Info 1.0 +s
++JSesh_max_quadrantHeight 18.0 +s
++JSesh_page_direction LEFT_TO_RIGHT +s
++JSesh_page_orientation HORIZONTAL +s
++JSesh_standard_sign_height 18.0 +s
++JSesh_line_skip 6.0 +s
++JSesh_max_quadrant_width 22.0 +s
++JSesh_use_lines_for_shading false +s
++JSesh_column_skip 8.0 +s
++JSesh_small_body_scale_limit 12.0 +s
++JSesh_cartouche_line_width 1.0 +s
++JSesh_small_sign_centered false +s
+bJSesh Demonstration File+s-!
+lThis file (allmdc.gly) demonstrates Jsesh capabilities +s-!
+las far as the Manuel de Codage is concerned+s-!
+lIt contains tests for the usual constructs+s-!
+lIts also a tutorial about the +s-+iManuel de Codage+s-!=200%
+lJsesh Is a work in progress. +s-!
+bEncoding hieroglyphic texts, tips and trics+s-!
+lBefore describing the +s-+imanuel de codage +s-+litself, I'd like to make a point or+s-!
+ltwo about how one should encode a hieroglyphic text.+s-!
!
+lTypically, you have a source, which might be a) a printed source, with typeset hieroglyphs,+s-!
+lb) a photograph or an acurate facsimile of the original text, or c) handwritten hieroglyph from +s-!
+lan egyptological publication (for instance, the +s-+iUrkunden).+s-!
!
+lYou must decide how faithfull to the original you must be, and it's not a simple question.+s-!
+lThe first point is that you can be sure that your +s-+iManuel de Codage +s-+ltext can't be a facsimile, so, one +s-!
+lway or another, it will betray the original. If the text is ultimately a hieratic text, you are already +s-!
+lcreating something completely different anyway.+s-!
!
+lNow, when you have a sign, should you look for the most precise variant for it, or use +s-!
+la somehow standardised one? To answer this, you should wonder if this variant is+s-!
+lrelevant, in the text, and in the use you intend to make of it. For instance, in the Kana√Øs texts+s-!
+lby Sethi the Ist, the first person pronoun uses many variants of A40 (+s-A40-+l).  If you intend the+s-!
+ltext to be for grammatical study, it's not very relevant. If you wonder whether it's a free play+s-!
+lto add diversity to the text, then you may take the time to use code the variants. As a rule,+s-!
+lif you are a beginner in Egyptian, I'd advise you to encode the "standard" sign, as it will+s-!
+lforce you to read the text, not to copy signs. The problem you have when you want to be+s-!
+lvery accurate is that you will find many cases of variants which have no encoding anyway.+s-!
!
+lWhen your source is an handwritten version of a text, like in the Urkunden, beware of one+s-!
+lpoint: unless a sign is very particular, an egyptologist will usually draw his glyphs in the easiest +s-!
+lway. That means, for instance, he will use V23A (+s-V23A-+l) instead of +s-V22-+l (V22) which is the normal+s-!
+lhieroglyphic sign. You must understand that, and when a sign selection is simply caused+s-!
+lby the individual hand of the author, render it with the "standard" sign. On the other hand, when +s-!
+lthe author has drawn a very specific sign form, this demands more work.+s-!
+bEncoding hieratic texts+s-!
+lThe above rule is even stronger for hieratic texts. There is no point in making a distinction+s-!
+lbetween +s-V23A-+l and +s-V22-+l, as both are rendered the same in hieratic!+s-!
!
+lNow, there are a number of peculiarities of hieratic which deserve more care. Those have+s-!
+lbeen pinpointed by sir Alan Gardiner in his article "The Transcription of New Kingdom Hieratic", +s-+iJEA+s-+l 15 (1929), p. 48-55. The rendering of hieratic texts should hint at the way+s-!
+lthe original signs are placed, in order to allow the reader to understand the reason for the rendering,+s-!
+land to go back to the original when necessary. +s-!
!
+lJSesh includes a number of signs which are usefull for rendering hieratic texts:+s-!
?800-Ff1-+l(Ff1)+s-?2000-+la sign particular to Ramesside texts, which serves as a kind of "wildcard".+s-!
?2000-+lIt is +s-+bnot +s-+lthe same as Z5 (+s-Z5-+l).+s-!
?800-Ff100-+l(Ff100)+s-?2000-+la non-standard sign, "dot space filler". Use it to render the +s-!
?2000-+lvarious dots a scribe may use, when they are not a ponctuation.+s-!
?800-Ff101-+l(Ff101)+s-?2000-+la non standard sign, horizontal space filler. Use it to render various+s-a-!
?2000-+lmeaningless horizontal sign the scribe may use to fill voids.+s-!
+lJSesh includes also specific signs for numbers in hieratic texts. In those texts,+s-!
+lthe "determinative" +s-1-+l is often smaller than the "digit" +s-Z1-+l. Careless rendering might cause+s-!
h:r-W:ra-Z1-Z1-Z1-+l to be read +s-+thrw 3, +s-+lwhereas the original has +s-h:r-W:ra-Z1-Z1\200-Z1\200-+l, which is clearly +s-+thrw 2.+s-!
!
+bDescription of the manuel de codage+s-!
+lThe +s-+iManuel de codage+s-+l is a system for describing hieroglyphic texts in ASCII characters+s-!
+lIt's the result of the work of an international working group, and it's described in :+s-!
?200-+lJ. Buurman, N. Grimal, M. Hainsworth, J. Hallof, D. van der Plas, +s-+iInventaire des signes hi√©roglyphiques en vue de leur saisie informatique, +s-+lParis, 1988 (first ed. 1984) +s-!
+lThe +s-+imanuel+s-+l was inspired by a software called GLYPH, by J. Buurman ; the first versions of glyph can be traced back to the early 70s+s-!
+lMost hieroglyphic editors use a more or less modified version of the +s-+imanuel,+s-+l notable modifications have been proposed in 1994 by H. van den Berg for winglyph+s-!
+lIn the Pisa 2002 +s-+iTable ronde Informatique et √âgyptologie,+s-+l M.-J. Nederhoff has proposed a very interesting +s-+iRevised Encoding System,+s-+l which addresses some of the +s-+imanuel+s-+l' shortcomings.+s-!
+lWe plan to take it into account later on.+s-!=200%
+bSimple manuel de codage codes+s-!
+lThe basic principle of the +s-+imanuel+s-+l is that a sign is described by its code in Gardiner's fonts. +s-!
+lFor example, +s-A1-+l is "A1" and +s-G5-+l is "G5"+s-!
+lVariant signs (those with a "*" in Gardiner's list) are indicated by uppercase letters after the code +s-!
+lFor instance, +s-A14A-+l is "A14A", vs. +s-A14-+l which is "A14"+s-!
+lA number of signs can also be described by their phonetic value.+s-!
+lFor instance, +s-b-+l can be coded "b".+s-!
+lA complete list of these will be given in JSesh's help.+s-!
!
+lThe codes for the egyptian consonnants are the following : +s-!
?200-+tA+s-?400-+lA+s-?800-+ti+s-?1000-+li+s-?1400-+ty+s-?1600-+ly+s-?2000-+ta+s-?2200-+la+s-!
?200-+tw+s-?400-+lw+s-?800-+tb+s-?1000-+lb+s-?1400-+tp+s-?1600-+lp+s-?2000-+tf+s-?2200-+lf+s-!
?200-+tm+s-?400-+lm+s-?800-+tn+s-?1000-+ln+s-?1400-+tr+s-?1600-+lr+s-?2000-+tl+s-?2200-+ll+s-!
?200-+th+s-?400-+lh+s-?800-+tH+s-?1000-+lH+s-?1400-+tx+s-?1600-+lx+s-?2000-+tX+s-?2200-+lX+s-!
?200-+tz+s-?400-+lz+s-?800-+ts+s-?1000-+ls+s-?1400-+tS+s-?1600-+lS+s-?2000-+tq+s-?2200-+lq+s-!
?200-+tk+s-?400-+lk+s-?800-+tg+s-?1000-+lg+s-?1400-+tt+s-?1600-+lt+s-?2000-+tT+s-?2200-+lT+s-!
?200-+td+s-?400-+ld+s-?800-+tD+s-?1000-+lD+s-!
+lFor uniliteral signs, there are two special codes for some frequent variants :+s-!
w-+l is coded "w", and +s-W-+l is coded "W"+s-!
m-+l is coded "m", and +s-M-+l is coded "M"+s-!
n-+l is coded "n", and +s-N-+l is coded "N"+s-!
+lTo these codes, the manuel adds also two groups :+s-!
+l"nTrw" for +s-nTrw-!
+l"nn" for +s-nn-!
+bGrouping of signs+s-!
+lGrouping hieroglyphs is done with a few simple operators :+s-!
?800-+l"-" separates cadrats. For instance, +s-G41-A-+l is coded "G41-A"+s-!
?800-+l":" stack groups. For instance, +s-p:n-+l is coded "p:n"+s-!
?800-+l"*" group signs on the same level in a cadrat. +s-!
?1500-+lFor instance, +s-p*t:pt-+l is coded "p*t:pt"+s-!=200%
+lMore complex groups can be built using parenthesis : +s-!
?1000-+lpA-A-N16:N23*Z1-+s-+bn:(x:t)*U30+s-+l-xAst:t*Z1+s-!
?1000-pA-A-N16:N23*Z1-$r-n:(x:t)*U30-$b-A-xAst:t*Z1-!=200%
+bSpecial signs+s-!
?800-+la cadrat-long space is coded ".." : +s-!
?1000-A-..-A-+l A-..-A-+s-!
?800-+la half-cadrat-long space is coded "." :+s-!
?1000-A-.-A-+l A-.-A-+s-!
?800-+lblack punctuation point +s-O-+l is coded "O" :+s-O:._-+l is O:.+s-!
?800-+lred punctuation point +s-o-+l is coded "o" :+s-o:._-+l is o:.+s-!
+bUnknown codes+s-!
+l When JSesh doesn't know a sign, it will replace it in display by its code e.g. :+s-!
?800-+lA9991-n:A9991*A1 gives +s-A9991-n:A9991*A1-!
!!
+bShading+s-!
+l When nothing is visible under a shading, you can use the following codes :+s-!
?800-+l"//" for cadrat-size shading : +s-//-!
?800-+l"/" for quarter shading : +s-/-!
?800-+l"v/" for vertical shading : +s-v/-!
?800-+l"h/" for horizontal shading : +s-h/-!
+lThose are "real" signs, which can be combined with others: p:h/ gives +s-p:h/-+l. +s-!
+lThey are seldom of use, however, as the method below is much more practical:+s-!
+lFor shading parts of a cadrat, use "#", followed by the figures 1,2,3,4+s-!
?800-+l'1' fills the start-top corner of the cadrat: p*t:pt#1 gives +s-p*t:pt#1-!
?800-+l'2' fills the end-top corner of the cadrat : p*t:pt#2 gives +s-p*t:pt#2-!
?800-+l'3' fills the start-bottom corner of the cadrat: p*t:pt#3 gives +s-p*t:pt#3-!
?800-+l'4' fills the end-bottom corner of the cadrat: p*t:pt#4 gives +s-p*t:pt#4-!
!
+lThese codes can be combined :+s-!
?800-+l p*t:pt#13 gives +s-p*t:pt#13-!
?800-+l p*t:pt#14 gives +s-p*t:pt#14-!
?800-+l p*t:pt#1234 gives +s-p*t:pt#1234-!
!
+lFor shading large parts of texts, use "#b" (shade begin) and "#e" (shade end) :+s-!
+lzone shading +s-!
?800-+li-W-bA:k-A1-#b-Xr:r-n:h:t-#e-xt:Z1+s-!
?800-i-W-bA:k-A1-#b-Xr:r-n:h:t-#e-xt:Z1-!
+bSign overlapping+s-!
+l It's possible to combine signs using the operator "##". The result is not always very good, though.+s-!
+lExempli gratia:+s-!
?800-m##a-a##b-M3##M1-M1##M3-!
?800-+lm##a-a##b-M3##M1-M1##M3+s-!
+lNote that the "official" operator for this is "#", but I suggest you use "##" instead,+s-!
+lfor
"#" has been much over abused (it means too many things).+s-!
+lIn any case, JSesh will transform  all "#" into "##" when saving !+s-!
+bRed zones+s-!
+lA zone of text can be written in red with "$r" (begin red) and $b (begin black) operators+s-!
?800-+l$r-HAt:a_-m_-s-b-sbA-A-i-i-t:Y1-arq:Z1_-m_-anx-n:x-Y1v_-$b-mt:t-r:W-Dba-Dba-Hw-A2-Z3_-n_-W-DA-A-Y1v_-+s-!
?800-$r-HAt:a_-m_-s-b-sbA-A-i-i-t:Y1-arq:Z1_-m_-anx-n:x-Y1v_-$b-mt:t-r:W-Dba-Dba-Hw-A2-Z3_-n_-W-DA-A-Y1v_-!
!
+lIndividual signs can be written in red by writing "\red" after them+s-!
+iThis is a JSesh specificity.+s-!
?800-+lp*p:p\red*p-+s-!
?800-p*p:p\red*p-!
!!
+bSign Modifications+s-!
+bInversion, rotation+s-!
+l A sign can be reversed by writing "\" after it : "A1\" is +s-A1\-!
+lIn JSesh, you can turn signs by any angle, using \R and the angle in degrees+s-!
?800-+lanx\R30-G5-G7+s-!
?800-anx\R30-G5-G7-!
+lA1-A\R90-A\R180-A\R270-A\R360-+s-!
A1-A\R90-A\R180-A\R270-A-!
+lThese two features can be combined :+s-!
+lA1-A\R90-A\R180-A\R270-A\R360-+s-!
A1-A\\R90-A\\R180-A\\R270-A\-!
+lNote that the "\R" operator is non standard. +s-!
+lIt was proposed for Winglyph in 1994, but apparently not used. +s-!
+lThe original manuel did not know about rotations at all+s-!
+land most implementation use only 90¬∞ rotations, with two operators:+s-!
+l\r \+ 1, 2, 3, 4: rotate 90, 180, 270 or 360 ¬∞+s-!
+l\t \+ 1, 2, 3, 4: same, plus reverse.+s-!
+lA1\r1-A1\r2-A1\r3-A1\r4-+s-!
A1\R90-A1\R180-A1\R270-A1-!
+lA1\t1-A1\t2-A1\t3-A1\t4-+s-!
A1\\R90-A1\\R180-A1\\R270-A1\-!
!
+bScaling+s-!
+l It's possible to scale a sign by writing "\" and a percentage.+s-!
+lThe sign's base size will be modified accordingly :+s-!
?800-+lA1-A1\80-A1\50-A1\20+s-!
?800-A1-A1\80-A1\50-A1\20-!
+lThe percentage can even be greater than 100: +s-!
?800-+lt-t\80-t\200-t\400-t\1000-+s-!
?800-t-t\80-t\200-t\400-t\1000-!
+inote that the sign is limited by the cadrat maximal size.+s-!
+lThis operator wasn't in the 1988 format, but is widely used.+s-!
!
+lThis can be used to customize the effect of scaling in cadrats :+s-!
+lLet's consider the group +s-zA:zA*zA-+l, written "zA:zA*zA". +s-!
+lNotice that the upper +s-zA-+l is a bit larger than the others.+s-!
+lWe can correct this with scaling :+s-!
?800-+lzA\70:zA\70*zA\70-+s-!
?800-zA\60:zA\60*zA\60-!
!
!
+lIn traditionnal typography, the sizes of fonts are ruled by a decrease of a factor sqrt(2).+s-!
+lThis gives a nice visual effect, and you might try using these factors : +s-!
?800-+lA1-A1\70-A1\49-A1\35-A1\24+s-!
?800-A1-A1\70-A1\49-A1\35-A1\24-!
+lA stress test for effect combination : rotated scaled sign (any use ?)+s-!
xA\50-xA\50\R45-xA\\R45-xA\\50\R45-!
+lrotation test with non-square sign :+s-wD-wD\R45-wD-wD\R90-pt\R90-!=200%
+bIgnored signs +s-!
+i(JSesh extension)+s-!
+lAs cadrats don't respect words boundaries, you might find yourself quoting a word, or a text,+s-!
+lwhich start in the middle of a cadrat. In JSesh, the "\i" operator means that a sign is irrelevant.+s-!
+l it will be drawn in very light gray, simply for space filling.+s-!
?800-+lM\i:p*t:pt+s-!
?800-M\i:p*t:pt-!
+bWide signs and groups (non standard extension)+s-!
+l In Late Egyptian texts, in particular hieratic texts, some groups can be very wide.+s-!
+lOften, they contain a hieroglyph which is very elongated, an lots of smaller signs below it.+s-!
+lThe normal scaling rules would reduce the cadrat's width, and give both a difficult to read and unfaithful rendering.+s-!
+lThus, JSesh provides the operator "\l". It says that the current sign can have any width it likes.+s-!
+lwithout it, : "m-xt:x\80*t\80*D54\80" gives +s-m-xt:x\80*t\80*D54\80-!
+lwith it, :   "m-xt\l:x\80*t\80*D54\80" gives +s-m-xt\l:x\80*t\80*D54\80-!
+lThe best results are obtained by combining this and scaling : +s-!
?800-+lir\200:r*t*W-ir\200\l:r*t*W+s-!
?800-ir\200:r*t*W-ir\200\l:r*t*W-!
!
+bGrammatical codes+s-!
+l The +s-+imanuel+s-+l states that " " (space) after a sign means that this sign ends a word, and that "  " (two spaces) mark a sentence end+s-!
+lJSesh stores this information along with the signs, but currently doesn't do anything with it.+s-!
+lAs an alternative, after the +s-+iWinglyph+s-+l practice, you can use underscores instead of spaces.+s-!
?800-+li-w-=f_-m_-p*t:pt_+s-!
?800-i-w-=f_-m_-p*t:pt_-!
!!
+bAbsolute sign positionning  +s-!
+lJSesh borrows the syntax from macscribe; the interpretation is made up from scratch, though.+s-!
+lA group made with the operator ** will use +s-+iabsolute positioning.+s-!
+leach sign in such a group should be followed by a position of the form "{{x,y,s}}"+s-!
+lwhere +s-?600-+l x is the distance of the sign to the +s-+ileft+s-+l of the group+s-!
?600-+ly is the distance to the +s-+itop+s-+l of the group+s-!
?600-+ls is the scale of the group (as a percentage)+s-!
+lIf nothing is specified, the default values are 0,0,100.+s-!
!
+lx and y are expressed in 1/1000 of the height of an +s-A1-+l (A1) sign+s-!
?800-+lstp{{0,0,100}}**n{{0,800,100}}**ra{{700,0,70}}+s-!
?800-stp**n{{0,800,100}}**ra{{700,0,70}}-!
+lmore fun with positioning : +s-!
?800-+lA1{{200,20,100}}**T31\R50{{120,0,40}}+s-!
?800-A1{{200,20,100}}**T31\R50{{120,0,40}}-!
!
+iImportant note: +s-+lWe previously used &&, which  was in fact a mistake, as its meaning in Macscribe is indeed quite+s-!
+ldifferent. We intend to correct this in a future release (with a mecanism for compatibility). In future versions of JSesh, the +s-!
+loperator for explicit placement will be **.+s-!
!
+bLigatures+s-!
+lA ligature system was introduced quite soon, in the form of special group. This is a "standard" extension to the manuel de codage.+s-!
+lJSesh knows about a number of special groups. The operator "&" means that signs are to be grouped together in a special way.+s-!
?800-+lG1&X1-stp&n&ra-D&d-Ax&x-t&w&t- gives : +s-!
?800-G1&X1-stp&n&ra-D&d-Ax&x-t&w&t-!
+bComplex ligatures+s-!
+lJSesh (from version 2alpha20 and later) has a mecanism inspired from macscribe's syntax for ligaturing a sign and a complex group.+s-!
+lTo tell it fast, each sign has up to two rectangular zone in which a group can be inserted. One zone is "before" the sign, the other is "after" the +s-!
+lsign. Example : in +s-(1:1*1)^^^nTr-+l and +s-X2^^^nTr-+l, the groups +s-1:1*1-+l and +s-X2-+l are inserted in front (first area) of +s-nTr-+l. This is written :+s-!
?800-+l(Z1:Z1*Z1)^^^nTr and X2^^^nTr+s-!
+lIt works well for most birds : +s-t^^^w-t^^^m-t^^^A-!
+lThe other zone is "after sign": +s-Ax&&&x-..-A&&&t-..-w&&&t-..-ns&&&(mSa*Z3)-..-D&&&(d:d:t)-!
+lis written : Ax&&&x-..-A&&&t-..-w&&&t-..-ns&&&(mSa*Z3)-..-D&&&(d:d:t)+s-!
+lBoth operators can be combined : +s-t^^^w&&&t-+l, t^^^w&&&t+s-!
+lWhen JSesh has no explicit data about a sign, it tries to guess. Note that in future versions of JSesh,+s-!
+lthe &&& and ^^^ operator will be replaced by && and ^^.+s-!
+bUser Modifiers+s-!
+lTo allow extensions of the manuel, JSesh can parse all modifiers after a sign, if they respect this rule :+s-!
?400-+l* a modifier is introduced by "\"+s-!
?400-+l* it contains a sequence of letters, which is his name, and a sequence of digits, which is his value.+s-!
?800-+lA1\IdontMeanAthing\number1000+s-!
?800-A1\\IdontMeanAthing\number1000-!
!!
+bCartouches, Serekh, etc.. +s-!
+lCartouches are written between "-<-" and "->-".+s-!
+lcartouche+s-!
?800-+lsw:t-bit:t-<-ra-mn:n-xpr->-anx-DA-s+s-!
?800-sw:t-bit:t-<-ra-mn:n-xpr->-anx-DA-s-!
?800-<-sw-t:n-G7-N41:t*B1-G7-t:A-A51-s-y:B1-G7->-!
?800-+l<-sw-t:n-G7-N41:t*B1-G7-t:A-A51-s-y:B1-G7->+s-!
!
+lserekh+s-!
?800-+l<S-E1:D40-mAat-mr->+s-!
?800-<S-E1:D40-mAat-mr->-!
!
+lHut-sign+s-!
?800-+l<H-Z3-A19->+s-!
?800-<H-Z3-A19->-!
!
+lEnclosure (not yet drawn, but correctly read)+s-!
?800-+l<F-bA-A-y:r-i-i-Aa18-Z1-mr:r-W:t-A2-r-D:t:N17->+s-!
?800-<F-bA-A-y:r-i-i-Aa18-Z1-mr:r-W:t-A2-r-D:t:N17->-!
!
+lSome parts of the cartouche may be absent, or may be drawn in a different place.+s-!
+lIn this case, the letter-code (if any) should be lowercase.+s-!
+la figure indicates what should be drawn ; the available constructs are :+s-!
+lcartouche : nothing = 0 ; no-knot : 1 ; knot : 2+s-!
?800-+l<1-ra-mn:n-xpr-1>+s-!
?800-<1-ra-mn:n-xpr-1>-!
?800-+l<1-ra-mn:n-xpr-0>-!
?800<1-ra-mn:n-xpr-0>!
?800+s-+l<2-ra-mn:n-xpr-1>+s-!
?800-<2-ra-mn:n-xpr-1>-!
!
+lhut-sign : 0: nothing, 1: no square, 2: square in the bottom; 3: square in the top.+s-!
?800-+l<h0-Z3-A19-h3>+s-!
?800-<h0-Z3-A19-3-h2>-!
?800-+l<h3-nTr-h1>+s-!
?800-<h3-nTr-h1>-!
?800-+l<h2-nTr-h2>+s-!
?800-<h2-nTr-h2>-!
!
+lSerekh +s-!
?800-+l<S-E1:D40-mAat-mr->+s-!
?800-<S-E1:D40-mAat-mr->-!
?800-+l<s2-E1:D40-mAat-mr-1>+s-!
?800-<s2-E1:D40-mAat-mr-s1>-!
!!
+bAlphabetic Text+s-!
+l	alphabetic text is introduced by "\+" followed by : +s-!
?800-+ll for latin script+s-!
?800-+li for +s-+iitalic+s-+l script+s-!
?800-+lb for +s-+bbold+s-+l script+s-!
?800-+lt for translitteration +s-+t(anx wDA snb)+s-!
?800-+lc for coptic script (not yet)+s-!
?800-+lh for hebrew script (not yet)+s-!
?800-+lg for greek script (not yet)+s-!
?800-+lr for cyrillic script (not yet)+s-!
?800-+l\+ for comments (comments are invisibles)+s-!
?800-+ls to revert to hieroglyphs+s-!
+iNotes+s-?900-+i * the manual says nothing about the encoding of coptic, greek, hebrew or cyrillic !+s-!
?900-+i* you should go back to the hieroglyphic mode (\+s) before the end of the line+s-!
?900-+i* Translitteration is typed using the encoding explained above for hieroglyphs.+s-!
?900-+i* Uppercase translitteration letters are supposed to be coded like this :+s-!
?2000-+i"^" \+ translitteration code. (JSesh doesn't support this yet).+s-!
?2000-+i"^pAnb" for "P+s-+tAnb+s-+i".+s-!
?2000-+iAvoid at all the direct use of the codes supported by your particular font+s-!
?2000-+i(except probably when the unicode standard for translitteration appears).+s-!
!
+lExempli gratia :+s-!
?800-+l\+l this is a text \+iwith italics and \+s nTr-md-Z3A\+\+ and a comment\+s-!+s-!
+lgives+s-!
?800-+l this is a text +s-+iwith italics and +s-nTr-md-Z3A-!=200%
+lIn Jsesh, you can easily include a \+ sign in a latin text ;+s-!
+lsimply write \\+ (this is not in the +s-+imanuel+s-+l)+s-!
+lYou can write text in cartouches : +s-!
?800-+lsw:t-bit:t-<-\+tmn-xpr-ra\+s->-anx-DA-s+s-!
?800-sw:t-bit:t-<-+tmn-xpr-ra+s->-anx-DA-s-!
!
+bSuperscript (line numbers)+s-!
+l Superscript is done by writing "|+s-+iyour text+s-+l-" . e.g +s-!
?400-+l|R(1),[1.1]-z:A1*Z1-p-Z7-wn:n-i-n:p*Z7-E15-x:D43-Z7-Y1:n-A1-r:n-f-+s-!
?400-|R(1),[1.1]-z:A1*Z1-p-Z7-wn:n-i-n:p*Z7-E15-x:D43-Z7-Y1:n-A1-r:n-f-!
+bLine skips+s-!
+lLine skips are indicated by "-!"+s-!
+lIf a line skip is of the form by "-!=+s-+inumber+s-+l%", a space of +s-+inumber+s-+l percent times the normal skip is skipped+s-!
?800-+le.g. four time the normal skip : -!=400%+s-!=400%
+lnext line+s-!
+bNew pages+s-!
+lnew page are indicated by -!!+s-!!
+bhorizontal lines+s-!
+l A line can be drawn with the construct "{l+s-+inumber,number+s-+l}". +s-!
+lThe first number is the start position, the second is the ending position.+s-!
+lThe unit is 1/200th of the width of a +s-n-+l sign+s-!
+lThe letter can be either 'l' or "L", for a thin or bold line+s-!
?800-+l{l200,800}+s-!
{l200,800}-!
?800-+l{L200,800}+s-!
{L200,800}-!
!
+bTabulation+s-!
+l tabulation is indicated by "?+s-+inumber+s-+l"; the number is expressed in 1/200th of the size of an +s-n-+l sign.+s-!
+lExempli gratia : to align our examples, we use "?800" :+s-!
?800-+l?800\+lan example+s-!
?800-+lan example+s-!
?800-+lthe +s-A1_-+l sign should appear after the +s-A2_-+l below : +s-!
?800-+l?400-A1-?100-A2-+s-!
?400-A1-?100-A2-!
!
!!
+bEcdotic codes+s-!
+lAdded+s-!
?800-+l-[&-i-w-r:a-ra-m-p*t:pt-&]+s-!
?800-[&-i-w-r:a-ra-m-p*t:pt-&]-!
+lSuperfluous+s-!
?800-+l-[{-i-w-r:a-ra-m-p*t:pt-}]+s-!
?800-[{-i-w-r:a-ra-m-p*t:pt-}]-!
+lErased+s-!
?800-+l-[[-i-w-r:a-ra-m-p*t:pt-]]+s-!
?800-[[-i-w-r:a-ra-m-p*t:pt-]]-!
+lPreviously readable+s-!
?800-+l-["-i-w-r:a-ra-m-p*t:pt-"]+s-!
?800-["-i-w-r:a-ra-m-p*t:pt-"]-!
+lAdded by scribe+s-!
?800-+l-['-i-w-r:a-ra-m-p*t:pt-']+s-!
?800-['-i-w-r:a-ra-m-p*t:pt-']-!
+lMinor editor addition +s-+b(Non standard. Initially in MacScribe)+s-!
?800-+l-[(-i-w-r:a-ra-m-p*t:pt-)]+s-!
?800-[(-i-w-r:a-ra-m-p*t:pt-)]-!
+lDubious reading +s-+b(Non standard. Initially in MacScribe)+s-!
?800-+l-[?-i-w-r:a-ra-m-p*t:pt-?]+s-!
?800-[?-i-w-r:a-ra-m-p*t:pt-?]-!
+lThe original +s-+imanuel+s-+l suggested that philological indications worked as parenthesis,+s-!
+lbut this doesn't correspond to actual typographical practices.+s-!
+lHence, winglyph(tm) considers these are simple signs.+s-!
+lwhich means that you don't need to match them.+s-!
+lJSesh supports both this interpretation and the original one (which was supported in tksesh).+s-!
+lCurrently, it loads any file with a ".gly" extension using the winglyph rule, +s-!
+land any file with a ".hie" extension using tksesh's rule+s-!
+lIn cadrat :+s-!
?800-+lp*[[*t*]]:pt_-p*[[*t:pt-]]+s-!
?800-p*[[*t*]]:pt_-p*[[*t:pt-]]-!
!
+bSupport for deprecated +s-+iManuel+s-+b practices+s-!
+lJSesh is able to read texts that don't follow the exact manuel de codage.+s-!
+lFor instance, it's quite forgiving about spaces.+s-!
+lHowever, when saving a text, +s-+iJSesh+s-+l will write it in a very normalized form, to ensure a maximal readability.+s-!
